#!/usr/bin/env bash

################################################################################
# Check if hwloc commands exist
################################################################################
declare -i HAS_HWLOC=0
type hwloc-bind >/dev/null 2>&1
HAS_HWLOC="${HAS_HWLOC} + $?"

type hwloc-distrib >/dev/null 2>&1
HAS_HWLOC="${HAS_HWLOC} + $?"

type hwloc-ls >/dev/null 2>&1
HAS_HWLOC="${HAS_HWLOC} + $?"

type hwloc-calc >/dev/null 2>&1
HAS_HWLOC="${HAS_HWLOC} + $?"

type hwloc-ps >/dev/null 2>&1
HAS_HWLOC="${HAS_HWLOC} + $?"


################################################################################
# Check if nvidia-smi exist
################################################################################
declare -i HAS_NVIDIA=0
type nvidia-smi >/dev/null 2>&1
HAS_NVIDIA="${HAS_NVIDIA} + $?"


################################################################################
# Get current cpuset
################################################################################
CURRENT_CPUSET=""
if [[ ${HAS_HWLOC} -eq 0 ]]; then
  MY_PID="$BASHPID"
  CURRENT_CPUSET=$(hwloc-ps --cpuset | grep "${MY_PID}" | cut -f 2)
fi


################################################################################
# Get visible gpu
################################################################################
declare -i NUM_GPUS=0
VISIBLE_GPUS=""
if [[ ${HAS_NVIDIA} -eq 0 ]]; then
  NUM_GPUS=$(nvidia-smi -L | wc -l);
  if [[ -v CUDA_VISIBLE_DEVICES ]]; then
    VISIBLE_GPUS=${CUDA_VISIBLE_DEVICES}
  else
    VISIBLE_GPUS="$( seq 0 $((NUM_GPUS-1)) )"
  fi
fi

GPU_MAPPING=""
if [[ ${NUM_GPUS} -gt 0 ]]; then
  GPU_MAPPING="True"
else
  GPU_MAPPING="False"
fi


################################################################################
# Get queue id
# supports sbatch, bsub, aprun
################################################################################
MY_QUEUE=""
MY_QUEUE_ID="0"
GPU_IGNORE_QUEUE="True"

if [[ -v SLURM_LOCAL_ID ]]; then
  GPU_IGNORE_QUEUE="False"
  MY_QUEUE="sbatch"
  MY_QUEUE_ID=${SLURM_LOCAL_ID}
elif [[ -v LBS_JOBINDEX ]]; then
  GPU_IGNORE_QUEUE="False"
  MY_QUEUE="bsub"
  MY_QUEUE_ID=${LBS_JOBINDEX}
elif [[ -v ALPS_APP_PE ]]; then
  GPU_IGNORE_QUEUE="False"
  MY_QUEUE="aprun"
  MY_QUEUE_ID=${ALPS_APP_PE}
fi


################################################################################
# Show help
################################################################################
function show_help {
  local cmd=$(basename "$0")
  echo "Usage: ${cmd} <options> -- command ..." 
  echo "  Set the process mask, OMP environment variables and CUDA environment"
  echo "  variables to sane values if possible. Uses hwloc and nvidia-smi if"
  echo "  available.  Will preserve the current process binding, so it is safe"
  echo "  to use with a queuing system or mpiexec."
  echo ""
  echo "Options:"
  echo "  --proc-bind=<LOC>     Set the initial process mask for the script.  "
  echo "                        LOC can be any valid location argument for"
  echo "                        hwloc-calc. (Default: all)"
  echo "  --distribute=N        Distribute the current proc-bind into N groups" 
  echo "  --index=I             Use the i'th group (zero based)" 
  echo "  --visible-gpus        Comma separated list of gpu ids"
  echo "                        Default: CUDA_VISIBLE_DEVICES or all gpus in"
  echo "                        sequential order"
  echo "  --gpu-ignore-queue    Ignore queue job id when choosing visible GPU"
  echo "  --no-gpu-mapping      Do not set CUDA_VISIBLE_DEVICES"
  echo "  --openmp=M.m          Set env variables for the given OpenMP version"
  echo "                        Default: 4.0"
  echo "  --openmp-percent=N    Integer percentage of cpuset to use for OpenMP"
  echo "                        threads.  Default: 100"
  echo "  --openmp-places=<Op>  Op=threads|cores|sockets. Default: threads"
  echo "  --no-openmp-proc-bind Set OMP_PROC_BIND to false and unset OMP_PLACES"    
  echo "  --force-openmp-proc-bind=<OP>"
  echo "                        Override logic for selecting OMP_PROC_BIND."
  echo "  --no-openmp-nested    Set OMP_NESTED to false"
  echo "  --test-bindings       Show the bindings without executiong a command"
  echo "  -v|--verbose          Show options and relevant environment variables" 
  echo "  -h|--help             Show this message" 
  echo ""
  echo "Sample Usage:"
  echo "  Split the current process cpuset into 4 and use the 3rd group"
  echo "    ${cmd} --distribute=4 --index=2 -v -- command ..."
  echo "  Bing the process to all even cores"
  echo "    ${cmd} --proc-bind=core:even -v -- command ..."
  echo "  Bind to the first 64 cores and split the current process cpuset into 4"
  echo "    ${cmd} --proc-bind=core:0-63 --distribute=4 --index=0 -- command ..."
  echo "  skip GPU 0 when mapping visible devices"
  echo "    ${cmd} --distribute=4 --index=0 --visible-gpus=1,2 -v -- command ..."
  echo "  Display the current bindings"
  echo "    ${cmd} --proc-bind=numa:0 --test-bindings -v"
  echo ""
}


################################################################################
# Parse command line arguments
################################################################################
# Show help if no command line arguments given
if [[ "$#" -eq 0 ]]; then
  show_help 
  exit 0
fi

declare -a UNKNOWN_ARGS=()
declare -i DISTRIBUTE=1
declare -i INDEX=0
PROC_BIND="all"
OPENMP_VERSION=4.0
declare -i OPENMP_PERCENT=100
OPENMP_PLACES=${OMP_PLACES:-threads}
OPENMP_PROC_BIND=True
FORCE_OPENMP_PROC_BIND=""
OPENMP_NESTED=${OMP_NESTED:-true}
TEST_BINDINGS="False"
VERBOSE=False

for i in $@; do
  case $i in
    # number of partitions to create
    --proc-bind=*)
      PROC_BIND="${i#*=}"
      shift
      ;;
    --distribute=*)
      DISTRIBUTE="${i#*=}"
      shift
      ;;
    # which group to use
    --index=*)
      INDEX="${i#*=}"
      shift
      ;;
    --visible-gpus=*)
      VISIBLE_GPUS=($(echo "${i#*=}" | tr ',' ' '))
      shift
      ;;
    --gpu-ignore-queue)
      GPU_IGNORE_QUEUE="True"
      shift
      ;;
    --no-gpu-mapping)
      GPU_MAPPING="False"
      shift
      ;;
    --openmp=*)
      OPENMP_VERSION="${i#*=}"
      shift
      ;;
    --openmp-percent=*)
      OPENMP_PERCENT="${i#*=}"
      shift
      ;;
    --openmp-places=*)
      OPENMP_PLACES="${i#*=}"
      shift
      ;;
    --no-openmp-proc-bind)
      OPENMP_PROC_BIND="False"
      shift
      ;;
    --force-openmp-proc-bind=*)
      FORCE_OPENMP_PROC_BIND="${i#*=}"
      shift
      ;;
    --no-openmp-nested)
      OPENMP_NESTED="false"
      shift
      ;;
    --test-bindings)
      TEST_BINDINGS="True"
      shift
      ;;
    -v|--verbose)
      VERBOSE="True"
      shift
      ;;
    -h|--help)
      show_help
      exit 0
      ;;
    # ignore remaining arguments
    --)
      shift
      break
      ;;
    # unknown option
    *)
      UNKNOWN_ARGS+=("$i")
      shift
      ;;
  esac
done


################################################################################
# Check unknown arguments
################################################################################
if [[ ${#UNKNOWN_ARGS[*]} > 0 ]]; then
  echo "Uknown options: ${UNKNOWN_ARGS[*]}"
  exit 1
fi


################################################################################
# Check hwloc
################################################################################
if [[ ${HAS_HWLOC} -ne 0 ]]; then
  echo "hwloc not found, no process binding will occur"
  DISTRIBUTE=1
  INDEX=0
fi


################################################################################
# Check that visible gpus are valid
################################################################################
if [[ "${GPU_MAPPING}" == "True" ]]; then
  for ((i=0; i < ${#VISIBLE_GPUS[*]}; i++)); do
    if [[ ${VISIBLE_GPUS[$i]} -ge ${NUM_GPUS} || ${VISIBLE_GPUS[$i]} -lt 0 ]]; then
      echo "Invaild GPU ID ${VISIBLE_GPUS[$i]}, setting to 0"
      VISIBLE_GPUS[$i]=0;
    fi
  done
  NUM_GPUS=${#VISIBLE_GPUS[*]}
fi


################################################################################
# Check OpenMP percent
################################################################################
if [[ ${OPENMP_PERCENT} -lt 1 ]]; then 
  echo "OpenMP percent < 1, setting to 1"
  OPENMP_PERCENT=1
elif [[ ${OPENMP_PERCENT} -gt 100 ]]; then 
  echo "OpenMP percent > 100, setting to 100"
  OPENMP_PERCENT=100
fi

################################################################################
# Check distribute
################################################################################
if [[ ${DISTRIBUTE} -le 0 ]]; then
  echo "Invalid input for distribute, changing distribute to 1"
  DISTRIBUTE=1
fi

if [[ ${INDEX} -ge ${DISTRIBUTE} ]]; then
  echo "Invalid input for index, changing index to 0"
  INDEX=0
fi


################################################################################
# Find cpuset and num threads
################################################################################
CPUSET=""
declare -i NUM_THREADS=0

if [[ ${HAS_HWLOC} -eq 0 ]]; then
  if [[ "${CURRENT_CPUSET}" == "" ]]; then
    BINDING=$(hwloc-calc ${PROC_BIND})
  else 
    BINDING=$(hwloc-calc --restrict ${CURRENT_CPUSET} ${PROC_BIND})
  fi

  CPUSETS=($(hwloc-distrib --restrict ${BINDING} --at core ${DISTRIBUTE}))
  CPUSET=${CPUSETS[${INDEX}]}
  NUM_THREADS=$(hwloc-ls --restrict ${CPUSET} --only pu | wc -l)
else
  NUM_THREADS=$(cat /proc/cpuinfo | grep -c processor)
fi

declare -i OPENMP_NUM_THREADS=$((NUM_THREADS * OPENMP_PERCENT))
OPENMP_NUM_THREADS=$((OPENMP_NUM_THREADS / 100))

if [[ ${OPENMP_NUM_THREADS} -lt 1 ]]; then
  OPENMP_NUM_THREADS=1
elif [[ ${OPENMP_NUM_THREADS} -gt ${NUM_THREADS} ]]; then
  OPENMP_NUM_THREADS=${NUM_THREADS}
fi


################################################################################
# Set OpenMP environment variables
################################################################################

# set OMP_NUM_THREADS
export OMP_NUM_THREADS=${OPENMP_NUM_THREADS}

# set OMP_PROC_BIND and OMP_PLACES
if [[ "${OPENMP_PROC_BIND}" == "True" ]]; then
  if [[ "${FORCE_OPENMP_PROC_BIND}" == "" ]]; then
    #default proc bind logic
    if [[ "${OPENMP_VERSION}" == "4.0" || "${OPENMP_VERSION}" > "4.0" ]]; then
      export OMP_PLACES="${OPENMP_PLACES}"
      export OMP_PROC_BIND="spread"
    else
      export OMP_PROC_BIND="true"
      unset OMP_PLACES
    fi
  else
    #force proc bind
    export OMP_PLACES="${OPENMP_PLACES}"
    export OMP_PROC_BIND="${FORCE_OPENMP_PROC_BIND}"
  fi
else
  # no openmp proc bind
  unset OMP_PLACES
  unset OMP_PROC_BIND
fi

# set OMP_NESTED
export OMP_NESTED=${OPENMP_NESTED}


################################################################################
# Set CUDA environment variables
################################################################################

if [[ "${GPU_MAPPING}" == "True" ]]; then
  if [[ "${GPU_IGNORE_QUEUE}" == "True" ]]; then
    declare -i GPU_ID=$((INDEX % NUM_GPUS)) 
    export CUDA_VISIBLE_DEVICES=${VISIBLE_GPUS[${GPU_ID}]}
  else
    declare -i MY_TASK_ID=$((MY_QUEUE_ID * DISTRIBUTE + INDEX))
    declare -i GPU_ID=$((MY_TASK_ID % NUM_GPUS)) 
    export CUDA_VISIBLE_DEVICES=${VISIBLE_GPUS[${GPU_ID}]}
  fi
fi


################################################################################
# Print verbose 
################################################################################

if [[ "${VERBOSE}" == "True" ]]; then
  echo "[HPCBIND]"
  if [[ ${HAS_HWLOC} -eq 0 ]]; then
    if [[ "${MY_QUEUE}" != "" ]]; then
      echo "queue=${MY_QUEUE}"
    fi
    echo "hwloc=true"
    echo "proc_bind=${PROC_BIND}"
    echo "distribute=${DISTRIBUTE}"
    echo "index=${INDEX}"
    if [[ "${CURRENT_CPUSET}" == "" ]]; then
      echo "parent_cpuset=all"
    else
      echo "parent_cpuset=${CURRENT_CPUSET}"
    fi
    echo "cpuset=${CPUSET}"
  else
    echo "hwloc=false"
  fi
  echo "OpenMP: ${OPENMP_VERSION}"
  echo "$(env | sort | grep OMP_)"
  echo "$(env | sort | grep CUDA_)"
  echo ""

fi

################################################################################
# Run command 
################################################################################

if [[ "${TEST_BINDINGS}" == "False" ]]; then
  if [[ ${HAS_HWLOC} -eq 0 ]]; then
    hwloc-bind ${CPUSET} -- $@
  else
    eval $@
  fi
else
  if [[ ${HAS_HWLOC} -eq 0 ]]; then
    if [[ -v DISPLAY ]]; then
      echo "hi"
      hwloc-bind ${CPUSET} -- lstopo --pid 0
    else
      echo "bye"
      hwloc-ls --restrict ${CPUSET}
    fi
  else
    echo "Unable to test bindings, hwloc not available."  
  fi
fi
